spring: 
  datasource:
    #username: sql664057
    #password: 3d95126e
    #url: jdbc:mysql://m.qimenghb.com:3306/sql664057?useUnicode=true&characterEncoding=UTF-8&&serverTimezone=UTC
    username: root
    password: root
    url: jdbc:mysql://localhost:3306/studentinform?useUnicode=true&characterEncoding=UTF-8&&serverTimezone=Asia/Shanghai&useAffectedRows=true
    
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    
    initialSize: 5 #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    maxActive: 8 #最大连接池数量
    minIdle: 5   #最小连接池数量
    maxWait: 60000 #  获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
    poolPreparedStatements: false #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
    #maxPoolPreparedStatementPerConnectionSize: -1 #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
    #validationQuery   用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
    #validationQueryTimeout    单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
    #testOnBorrow  true  申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    #testOnReturn  false 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    #testWhileIdle false 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    keepAlive: false #（1.0.28）  连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
    timeBetweenEvictionRunsMillis: 60000 #1分钟（1.0.14） 有两个含义：
                                        #1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
                                        #2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
    #numTestsPerEvictionRun  30分钟（1.0.14）  不再使用，一个DruidDataSource只支持一个EvictionRun
    minEvictableIdleTimeMillis: 300000  #连接保持空闲而不被驱逐的最小时间
    #connectionInitSqls    物理连接初始化的时候执行的sql
    #exceptionSorter 根据dbType自动识别  当数据库抛出一些不可恢复的异常时，抛弃连接
    filters: stat,log4j,wall #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
    #监控统计用的filter:stat
    #日志用的filter:log4j
    #防御sql注入的filter:wall
    #proxyFilters    类型是List<com.alibaba.druid.filter.Filter>，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系
    useGlobalDataSourceStat: true #合并
    
    connectionProperties: druid.stat.mergeSql=true,druid.stat.slowSqlMillis=500 
      
      

  redis:
    database: 0   # Redis数据库索引（默认为0）  
    host: 127.0.0.1   
    port: 6379  
    password:   # Redis服务器连接密码（默认为空）   
    timeout: 1000 # 连接超时时间（毫秒）        
    maxIdle: 300 #最大空闲数
#连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
#maxActive=600
#控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
    maxTotal: 1000
#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
    maxWaitMillis: 1000
#连接的最小空闲时间 默认1800000毫秒(30分钟)
    minEvictableIdleTimeMillis: 300000
#每次释放连接的最大数目,默认3
    numTestsPerEvictionRun: 1024
#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
    timeBetweenEvictionRunsMillis: 30000
#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
    testOnBorrow: true
#在空闲时检查有效性, 默认false

